{"ast":null,"code":"export async function postItemsUpdate(email, title, action) {\n  const res = await fetch(\"/api/items/\".concat(email, \"/\").concat(title, \"/\").concat(action), {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const json = await res.json();\n\n  if (res.status !== 200) {\n    alert(json.msg);\n  }\n}\nexport async function getUserAuth() {\n  const res = await fetch(\"/api/user/auth\");\n  const json = await res.json();\n\n  if (res.status === 200) {\n    return json;\n  } else {\n    alert(json.msg);\n  }\n}\nexport async function getAdminData(email, loggedIn) {\n  if (loggedIn) {\n    const res = await fetch(\"/api/admin/data/\".concat(email));\n    const json = await res.json();\n\n    if (res.status === 200) {\n      return json;\n    } else {\n      alert(json.msg);\n    }\n  } else {\n    alert('Admin is not loggedIn');\n  }\n}\nexport async function getLogin(email, password, remember) {\n  let res = await fetch(\"/api/user/login/\".concat(email, \"/\").concat(password, \"/\").concat(remember));\n  const json = await res.json();\n\n  if (res.status === 200) {\n    return json;\n  } else {\n    alert(json.msg);\n  }\n}\nexport async function postLogout() {\n  let res = await fetch(\"/api/user/logout\", {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const json = await res.json();\n\n  if (res.status !== 200) {\n    alert(json.msg);\n  }\n}\nexport async function postSignup(data) {\n  let res = await fetch('/api/user/signup', {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const json = await res.json();\n\n  if (res.status === 200) {\n    return json;\n  } else {\n    alert(json.msg);\n  }\n}\nexport async function postNewOrder(email, payment, items, total, totalPrice) {\n  let payload = {\n    payment,\n    total,\n    totalPrice,\n    items: {}\n  };\n  Object.values(items).filter(item => item.num > 0).map(function (item) {\n    payload.items[item.title] = item.num;\n  });\n  let res = await fetch(\"/api/order/new/\".concat(email), {\n    method: 'POST',\n    body: JSON.stringify(payload),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const json = await res.json();\n\n  if (res.status === 200) {\n    alert(\"Your order has been received by the system.\\n Order ID: \".concat(json.orderId));\n    return json;\n  } else {\n    alert(json.msg);\n  }\n}","map":{"version":3,"sources":["/Users/darkvedor/Projects/React-Restaurant-App/client/src/utils/api.js"],"names":["postItemsUpdate","email","title","action","res","fetch","method","headers","json","status","alert","msg","getUserAuth","getAdminData","loggedIn","getLogin","password","remember","postLogout","postSignup","data","body","JSON","stringify","postNewOrder","payment","items","total","totalPrice","payload","Object","values","filter","item","num","map","orderId"],"mappings":"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","sourcesContent":["export async function postItemsUpdate(email, title, action) {\n    const res = await fetch(`/api/items/${email}/${title}/${action}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    const json = await res.json();\n    if (res.status !== 200) {\n        alert(json.msg)\n    }\n}\n\nexport async function getUserAuth() {\n    const res = await fetch(`/api/user/auth`);\n    const json = await res.json();\n    if (res.status === 200) {\n        return json;\n    } else {\n        alert(json.msg)\n    }\n}\n\nexport async function getAdminData(email, loggedIn) {\n    if (loggedIn) {\n        const res = await fetch(`/api/admin/data/${email}`);\n        const json = await res.json();\n        if (res.status === 200) {\n            return json;\n        } else {\n            alert(json.msg)\n        }\n    } else {\n        alert('Admin is not loggedIn')\n    }\n}\n\nexport async function getLogin(email, password, remember) {\n    let res = await fetch(`/api/user/login/${email}/${password}/${remember}`);\n    const json = await res.json();\n    if (res.status === 200) {\n        return json;\n    } else {\n        alert(json.msg)\n    }\n}\n\nexport async function postLogout() {\n    let res = await fetch(`/api/user/logout`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    const json = await res.json();\n    if (res.status !== 200) {\n        alert(json.msg)\n    }\n}\n\nexport async function postSignup(data) {\n    let res = await fetch('/api/user/signup', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    const json = await res.json();\n    if (res.status === 200) {\n        return json;\n    } else {\n        alert(json.msg)\n    }\n}\n\nexport async function postNewOrder(email, payment, items, total, totalPrice) {\n    let payload = {payment, total, totalPrice, items: {}};\n    Object.values(items)\n        .filter(item => item.num > 0)\n        .map(function (item) {\n            payload.items[item.title] = item.num;\n        });\n    let res = await fetch(`/api/order/new/${email}`, {\n        method: 'POST',\n        body: JSON.stringify(payload),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    const json = await res.json();\n    if (res.status === 200) {\n        alert(`Your order has been received by the system.\\n Order ID: ${json.orderId}`);\n        return json;\n    } else {\n        alert(json.msg)\n    }\n}"]},"metadata":{},"sourceType":"module"}